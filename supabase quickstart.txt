Use Supabase with Next.js
Learn how to create a Supabase project, add some sample data, and query
from a Next.js app.
Create a Supabase project
Go to   and create a new Supabase project.When your project is up and running, go to the  , create a new table and insert
some data.Alternatively, you can run the following snippet in your project's  . This will create
a  instruments  table with some sample data.
1
database.newTable EditorSQL Editor
12345678910111213
-- Create the table
create table instruments ( id bigint primary key generated always as identity, name text not null
);
-- Insert some sample data into the table
insert into instruments (name)
values
 ('violin'), ('viola'), ('cello');
alter table instruments enable row level security;Getting StartedSearchDOCS
5/6/25, 9:51 AM Use Supabase with Next.js | Supabase Docs
https://supabase.com/docs/guides/getting-started/quickstarts/nextjs 1/4
Make the data in your table publicly readable by adding an RLS policy:
1234
create policy "public can read instruments"
on public.instruments
for select to anon
using (true);
Create a Next.js app
Use the  create-next-app  command and the  with-supabase  template, to create a
Next.js app pre-configured with:
2
Cookie-based Auth
TypeScriptTailwind CSS
1 npx create-next-app -e with-supabase
Declare Supabase Environment Variables
Rename  .env.example  to  .env.local  and populate with your Supabase connection
variables:
Project URL
Loading...
Anon key
3Loading...
5/6/25, 9:51 AM Use Supabase with Next.js | Supabase Docs
https://supabase.com/docs/guides/getting-started/quickstarts/nextjs 2/4
Loading...Loading...
.env.local
12
NEXT_PUBLIC_SUPABASE_URL=<SUBSTITUTE_SUPABASE_URL>NEXT_PUBLIC_SUPABASE_ANON_KEY=<SUBSTITUTE_SUPABASE_ANON_KEY>
Query Supabase data from Next.js
Create a new file at  app/instruments/page.tsx  and populate with the following.This will select all the rows from the  instruments  table in Supabase and render them on
the page.
4
app/instruments/page.tsx utils/supabase/server.ts
12345678
import { createClient } from '@/utils/supabase/server';
export default async function Instruments() {  const supabase = await createClient();  const { data: instruments } = await supabase.from("instruments").select();  return <pre>{JSON.stringify(instruments, null, 2)}</pre>
}
Start the app
Run the development server, go to   in a browser and you
should see the list of instruments.
5
http://localhost:3000/instruments
5/6/25, 9:51 AM Use Supabase with Next.js | Supabase Docs
https://supabase.com/docs/guides/getting-started/quickstarts/nextjs 3/4
Need some help? Contact support
Latest product updates? See Changelog
Something's not right? Check system status
© Supabase Inc—ContributingAuthor StyleguideOpen SourceSupaSquadPrivacy Settings
Next steps
Edit this page on GitHub
1 npm run dev
Set up   for your appAuth
 into your databaseInsert more data
Upload and serve static files using Storage
5/6/25, 9:51 AM Use Supabase with Next.js | Supabase Docs
https://supabase.com/docs/guides/getting-started/quickstarts/nextjs 4/4
Start with Supabase Framework Quickstarts Nuxt
Use Supabase with Nuxt
Learn how to create a Supabase project, add some sample data to your
database, and query the data from a Nuxt app.
Create a Supabase project
Go to   and create a new Supabase project.When your project is up and running, go to the  , create a new table and insert
some data.Alternatively, you can run the following snippet in your project's  . This will create
a  instruments  table with some sample data.
1
database.newTable EditorSQL Editor
12345678910111213
-- Create the table
create table instruments (  id bigint primary key generated always as identity,  name text not null
);
-- Insert some sample data into the table
insert into instruments (name)
values
  ('violin'),  ('viola'),  ('cello');
alter table instruments enable row level security;Getting StartedSearchDOCS
5/6/25, 9:51 AM Use Supabase with Nuxt | Supabase Docs
https://supabase.com/docs/guides/getting-started/quickstarts/nuxtjs 1/4
Make the data in your table publicly readable by adding an RLS policy:
1234
create policy "public can read instruments"
on public.instruments
for select to anon
using (true);
Create a Nuxt app
Create a Nuxt app using the  npx nuxi  command.
Terminal
2
1 npx nuxi@latest init my-app
Install the Supabase client library
The fastest way to get started is to use the  supabase-js  client library which provides a
convenient interface for working with Supabase from a Nuxt app.Navigate to the Nuxt app and install  supabase-js .
Terminal
3
1 cd my-app && npm install @supabase/supabase-js
Query data from the app4
5/6/25, 9:51 AM Use Supabase with Nuxt | Supabase Docs
https://supabase.com/docs/guides/getting-started/quickstarts/nuxtjs 2/4
In  app.vue , create a Supabase client using your project URL and public API (anon) key:
Project URL
Loading...
Anon key
Loading...
Replace the existing content in your  app.vue  file with the following code.
app.vueLoading...Loading...
1234567891011121314151617181920
 
<script setup>
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://<project>.supabase.co', '<your-anon-ke
const instruments = ref([])
async function getInstruments() {  const { data } = await supabase.from('instruments').select()  instruments.value = data}
onMounted(() => {  getInstruments()})</script><template>  <ul>    <li v-for="instrument in instruments" :key="instrument.id">{{ instrument.  </ul></template>
5/6/25, 9:51 AM Use Supabase with Nuxt | Supabase Docs
https://supabase.com/docs/guides/getting-started/quickstarts/nuxtjs 3/4
Need some help? Contact support
Latest product updates? See Changelog
Something's not right? Check system status
© Supabase Inc—ContributingAuthor StyleguideOpen SourceSupaSquadPrivacy Settings
Edit this page on GitHub
Start the app
Start the app, navigate to   in the browser, open the browser console,
and you should see the list of instruments.
Terminal
5
http://localhost:3000
1 npm run dev